package mainpkg;

import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Properties;

import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.TwitterFactory;
import twitter4j.auth.AccessToken;
import twitter4j.auth.RequestToken;

public class GetSetAccessToken {
	public String[] getSetAccessToken(){//String consumerKey,String consumerSecret){
		String[] accessTokenArray=new String[2];
		
		File file = new File("twitter4j.properties");//the consumerKey in this file is used if there is no myAccessToken.properties in your directory
        // in that case, the consumerKey in twitter4j.properties will be used for requesting a new accessToken
		Properties prop = new Properties();//just set an example, in fact it won't be used. prop isn't used in the following session
        InputStream is = null;
        OutputStream os = null;
        try {
            if (file.exists()) {
                is = new FileInputStream(file);
                prop.load(is);
            }

        } catch (IOException ioe) {
            ioe.printStackTrace();
            System.exit(-1);
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException ignore) {
                }
            }
            if (os != null) {
                try {
                    os.close();
                } catch (IOException ignore) {
                }
            }
        }
        try {
    		BufferedReader brAT=null;
            File fileMyAT=new File("myAccessToken.properties");//filePath to store accessToken
            try {
            	if(fileMyAT.exists())
            	{
            		brAT=new BufferedReader(new FileReader(fileMyAT));
            		
            		if((accessTokenArray[0]=brAT.readLine())!=null)
            		{
            			accessTokenArray[1]=brAT.readLine();
            			brAT.close();
            			return accessTokenArray;
            		}
            	}
            	
            }
            catch(IOException ioe)
            {
                ioe.printStackTrace();
                System.exit(-1);
            }
            finally
            {
                if (brAT != null) {
                    try {
                    	brAT.close();
                    } catch (IOException ignore) {
                    }
                }
                if (os != null) {
                    try {
                        os.close();
                    } catch (IOException ignore) {
                    }
                }
            }
            
            Twitter twitter = new TwitterFactory().getInstance();
            RequestToken requestToken = twitter.getOAuthRequestToken();
            System.out.println("Got request token.");
            System.out.println("Request token: " + requestToken.getToken());
            System.out.println("Request token secret: " + requestToken.getTokenSecret());
            AccessToken accessToken = null;

            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            while (null == accessToken) {
                System.out.println("Open the following URL and grant access to your account:");
                System.out.println(requestToken.getAuthorizationURL());
                try {
                    Desktop.getDesktop().browse(new URI(requestToken.getAuthorizationURL()));
                } catch (UnsupportedOperationException ignore) {
                } catch (IOException ignore) {
                } catch (URISyntaxException e) {
                    throw new AssertionError(e);
                }
                System.out.print("Enter the PIN(if available) and hit enter after you granted access.[PIN]:");
                String pin = br.readLine();
                try {
                    if (pin.length() > 0) {
                        accessToken = twitter.getOAuthAccessToken(requestToken, pin);
                    } else {
                        accessToken = twitter.getOAuthAccessToken(requestToken);
                    }
                } catch (TwitterException te) {
                    if (401 == te.getStatusCode()) {
                        System.out.println("Unable to get the access token.");
                    } else {
                        te.printStackTrace();
                    }
                }
            }
            System.out.println("Got access token.");
            System.out.println("Access token: " + accessToken.getToken());
            System.out.println("Access token secret: " + accessToken.getTokenSecret());
            
            BufferedWriter bw=new BufferedWriter(new FileWriter(fileMyAT));
            
            try {
                prop.setProperty("oauth.accessToken", accessToken.getToken());
                prop.setProperty("oauth.accessTokenSecret", accessToken.getTokenSecret());
                os = new FileOutputStream(file);
                prop.store(os, "twitter4j.properties");//save the access token
                os.close();
                accessTokenArray[0]=accessToken.getToken();
                accessTokenArray[1]=accessToken.getTokenSecret();
                bw.write(accessTokenArray[0]+"\r\n"+accessTokenArray[1]+"\r\n");
                bw.close();

            } catch (IOException ioe) {
                ioe.printStackTrace();
                System.exit(-1);
            } finally {
                if (os != null) {
                    try {
                        os.close();
                    } catch (IOException ignore) {
                    }
                }
            }
            System.out.println("Successfully stored access token to " + file.getAbsolutePath() + ".");
            System.exit(0);
        } catch (TwitterException te) {
            te.printStackTrace();
            System.out.println("Failed to get accessToken: " + te.getMessage());
            System.exit(-1);
        } catch (IOException ioe) {
            ioe.printStackTrace();
            System.out.println("Failed to read the system input.");
            System.exit(-1);
        }
		
		return accessTokenArray;
	}
}
